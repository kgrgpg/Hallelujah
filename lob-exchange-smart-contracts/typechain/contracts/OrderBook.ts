/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace OrderBook {
  export type OrderStruct = {
    id: BigNumberish;
    user: string;
    amount: BigNumberish;
    price: BigNumberish;
    orderType: BigNumberish;
    status: BigNumberish;
    timestamp: BigNumberish;
  };

  export type OrderStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    BigNumber
  ] & {
    id: BigNumber;
    user: string;
    amount: BigNumber;
    price: BigNumber;
    orderType: number;
    status: number;
    timestamp: BigNumber;
  };
}

export interface OrderBookInterface extends utils.Interface {
  functions: {
    "buyOrders(string,uint256)": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "getOrdersByAsset(string)": FunctionFragment;
    "matchOrders(string)": FunctionFragment;
    "nextOrderId()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "placeOrder(string,uint256,uint256,uint8)": FunctionFragment;
    "sellOrders(string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyOrders"
      | "cancelOrder"
      | "getOrdersByAsset"
      | "matchOrders"
      | "nextOrderId"
      | "orders"
      | "placeOrder"
      | "sellOrders"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyOrders",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrdersByAsset",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "matchOrders", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nextOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrder",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellOrders",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrdersByAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellOrders", data: BytesLike): Result;

  events: {
    "OrderCancelled(uint256)": EventFragment;
    "OrderFilled(uint256)": EventFragment;
    "OrderPlaced(uint256,address,uint256,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPlaced"): EventFragment;
}

export interface OrderCancelledEventObject {
  id: BigNumber;
}
export type OrderCancelledEvent = TypedEvent<
  [BigNumber],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderFilledEventObject {
  id: BigNumber;
}
export type OrderFilledEvent = TypedEvent<[BigNumber], OrderFilledEventObject>;

export type OrderFilledEventFilter = TypedEventFilter<OrderFilledEvent>;

export interface OrderPlacedEventObject {
  id: BigNumber;
  user: string;
  amount: BigNumber;
  price: BigNumber;
  orderType: number;
}
export type OrderPlacedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, number],
  OrderPlacedEventObject
>;

export type OrderPlacedEventFilter = TypedEventFilter<OrderPlacedEvent>;

export interface OrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelOrder(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getOrdersByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[OrderBook.OrderStructOutput[]]>;

    matchOrders(
      asset: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nextOrderId(overrides?: CallOverrides): Promise<[BigNumber]>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, number, number, BigNumber] & {
        id: BigNumber;
        user: string;
        amount: BigNumber;
        price: BigNumber;
        orderType: number;
        status: number;
        timestamp: BigNumber;
      }
    >;

    placeOrder(
      asset: string,
      amount: BigNumberish,
      price: BigNumberish,
      orderType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sellOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  buyOrders(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelOrder(
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getOrdersByAsset(
    asset: string,
    overrides?: CallOverrides
  ): Promise<OrderBook.OrderStructOutput[]>;

  matchOrders(
    asset: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

  orders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, number, number, BigNumber] & {
      id: BigNumber;
      user: string;
      amount: BigNumber;
      price: BigNumber;
      orderType: number;
      status: number;
      timestamp: BigNumber;
    }
  >;

  placeOrder(
    asset: string,
    amount: BigNumberish,
    price: BigNumberish,
    orderType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sellOrders(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    buyOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getOrdersByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<OrderBook.OrderStructOutput[]>;

    matchOrders(asset: string, overrides?: CallOverrides): Promise<void>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, number, number, BigNumber] & {
        id: BigNumber;
        user: string;
        amount: BigNumber;
        price: BigNumber;
        orderType: number;
        status: number;
        timestamp: BigNumber;
      }
    >;

    placeOrder(
      asset: string,
      amount: BigNumberish,
      price: BigNumberish,
      orderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OrderCancelled(uint256)"(id?: null): OrderCancelledEventFilter;
    OrderCancelled(id?: null): OrderCancelledEventFilter;

    "OrderFilled(uint256)"(id?: null): OrderFilledEventFilter;
    OrderFilled(id?: null): OrderFilledEventFilter;

    "OrderPlaced(uint256,address,uint256,uint256,uint8)"(
      id?: null,
      user?: null,
      amount?: null,
      price?: null,
      orderType?: null
    ): OrderPlacedEventFilter;
    OrderPlaced(
      id?: null,
      user?: null,
      amount?: null,
      price?: null,
      orderType?: null
    ): OrderPlacedEventFilter;
  };

  estimateGas: {
    buyOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getOrdersByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchOrders(
      asset: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    orders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    placeOrder(
      asset: string,
      amount: BigNumberish,
      price: BigNumberish,
      orderType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sellOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getOrdersByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchOrders(
      asset: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nextOrderId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    placeOrder(
      asset: string,
      amount: BigNumberish,
      price: BigNumberish,
      orderType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sellOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
