/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CollateralManagerInterface extends utils.Interface {
  functions: {
    "collateralBalances(address,string)": FunctionFragment;
    "depositERC20Collateral(string,uint256)": FunctionFragment;
    "depositNativeCollateral(string)": FunctionFragment;
    "getCollateralBalance(address,string)": FunctionFragment;
    "getUSDValue(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSupportedERC20Asset(string,address)": FunctionFragment;
    "setSupportedNativeAsset(string,bool)": FunctionFragment;
    "supportedERC20Assets(string)": FunctionFragment;
    "supportedNativeAssets(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawERC20Collateral(string,uint256)": FunctionFragment;
    "withdrawNativeCollateral(string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collateralBalances"
      | "depositERC20Collateral"
      | "depositNativeCollateral"
      | "getCollateralBalance"
      | "getUSDValue"
      | "owner"
      | "renounceOwnership"
      | "setSupportedERC20Asset"
      | "setSupportedNativeAsset"
      | "supportedERC20Assets"
      | "supportedNativeAssets"
      | "transferOwnership"
      | "withdrawERC20Collateral"
      | "withdrawNativeCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collateralBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20Collateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNativeCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getUSDValue", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedERC20Asset",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedNativeAsset",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedERC20Assets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedNativeAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Collateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNativeCollateral",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "collateralBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20Collateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNativeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedERC20Asset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedNativeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedERC20Assets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedNativeAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Collateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNativeCollateral",
    data: BytesLike
  ): Result;

  events: {
    "CollateralDeposited(address,string,uint256)": EventFragment;
    "CollateralWithdrawn(address,string,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface CollateralDepositedEventObject {
  user: string;
  asset: string;
  amount: BigNumber;
}
export type CollateralDepositedEvent = TypedEvent<
  [string, string, BigNumber],
  CollateralDepositedEventObject
>;

export type CollateralDepositedEventFilter =
  TypedEventFilter<CollateralDepositedEvent>;

export interface CollateralWithdrawnEventObject {
  user: string;
  asset: string;
  amount: BigNumber;
}
export type CollateralWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  CollateralWithdrawnEventObject
>;

export type CollateralWithdrawnEventFilter =
  TypedEventFilter<CollateralWithdrawnEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CollateralManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollateralManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collateralBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositERC20Collateral(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositNativeCollateral(
      asset: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCollateralBalance(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUSDValue(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSupportedERC20Asset(
      asset: string,
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSupportedNativeAsset(
      asset: string,
      supported: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportedERC20Assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportedNativeAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawERC20Collateral(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawNativeCollateral(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  collateralBalances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositERC20Collateral(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositNativeCollateral(
    asset: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCollateralBalance(
    user: string,
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUSDValue(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSupportedERC20Asset(
    asset: string,
    tokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSupportedNativeAsset(
    asset: string,
    supported: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportedERC20Assets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  supportedNativeAssets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawERC20Collateral(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawNativeCollateral(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    collateralBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositERC20Collateral(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNativeCollateral(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCollateralBalance(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDValue(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSupportedERC20Asset(
      asset: string,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportedNativeAsset(
      asset: string,
      supported: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedERC20Assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    supportedNativeAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20Collateral(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNativeCollateral(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollateralDeposited(address,string,uint256)"(
      user?: string | null,
      asset?: null,
      amount?: null
    ): CollateralDepositedEventFilter;
    CollateralDeposited(
      user?: string | null,
      asset?: null,
      amount?: null
    ): CollateralDepositedEventFilter;

    "CollateralWithdrawn(address,string,uint256)"(
      user?: string | null,
      asset?: null,
      amount?: null
    ): CollateralWithdrawnEventFilter;
    CollateralWithdrawn(
      user?: string | null,
      asset?: null,
      amount?: null
    ): CollateralWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    collateralBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositERC20Collateral(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositNativeCollateral(
      asset: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getCollateralBalance(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDValue(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSupportedERC20Asset(
      asset: string,
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSupportedNativeAsset(
      asset: string,
      supported: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportedERC20Assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedNativeAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawERC20Collateral(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawNativeCollateral(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositERC20Collateral(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositNativeCollateral(
      asset: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCollateralBalance(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDValue(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSupportedERC20Asset(
      asset: string,
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSupportedNativeAsset(
      asset: string,
      supported: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportedERC20Assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedNativeAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawERC20Collateral(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawNativeCollateral(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
